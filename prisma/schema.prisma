// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled 6543 -> runtime/app
  directUrl = env("DIRECT_URL") // direct 5432 -> migrazioni/CLI
}

/**
 * -------------------- BOOKING & LEGACY --------------------
 */

model Booking {
  id     Int      @id @default(autoincrement())
  date   DateTime
  people Int
  name   String
  email  String
  phone  String
  notes  String?

  // Estensioni
  type           BookingType
  agreePrivacy   Boolean       @default(false)
  agreeMarketing Boolean       @default(false)
  status         BookingStatus @default(pending)
  prepayToken    String?

  lunchItemsJson      Json?
  coverCents          Int?
  subtotalCents       Int?
  totalCents          Int?
  dinnerItemsJson     Json?
  dinnerSubtotalCents Int?
  dinnerCoverCents    Int?
  dinnerTotalCents    Int?
  tierType            String?
  tierLabel           String?
  tierPriceCents      Int?

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verifications BookingVerification[]
}

model BookingVerification {
  id        Int       @id @default(autoincrement())
  bookingId Int
  email     String
  token     String    @unique
  nonce     String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  Booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([expiresAt])
}

model BookingSettings {
  id                  Int       @id @default(1)
  enableDateTimeStep  Boolean   @default(true)
  fixedDate           DateTime?
  fixedTime           String?
  enabledTypes        Json
  typeLabels          Json
  prepayTypes         Json
  prepayAmountCents   Int?
  coverCents          Int       @default(0)
  lunchRequirePrepay  Boolean   @default(false)
  dinnerCoverCents    Int       @default(0)
  dinnerRequirePrepay Boolean   @default(false)
  siteBrandLogoUrl    String?
  siteHeroImageUrl    String?
  siteFooterRibbonUrl String?
  site                Json? // { brandLogoUrl?: string; heroImageUrl?: string; footerRibbonUrl?: string }
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

enum BookingType {
  pranzo
  cena
  aperitivo
  evento
}

enum BookingStatus {
  pending
  pending_payment
  confirmed
  failed
  expired
  cancelled
}

/**
 * -------------------- CATALOGO / CARRELLO --------------------
 */

model Product {
  id            Int     @id @default(autoincrement())
  slug          String  @unique
  name          String
  description   String?
  ingredients   String?
  allergens     String?
  priceCents    Int     @default(0)
  unitCostCents Int     @default(0)
  supplierName  String?
  stockQty      Int     @default(0)
  imageUrl      String?
  category      String?
  order         Int     @default(0)
  active        Boolean @default(true)
  sourceType    String?
  sourceId      String?

  // Flag nutrizionali
  isVegan       Boolean @default(false)
  isVegetarian  Boolean @default(false)
  isGlutenFree  Boolean @default(false)
  isLactoseFree Boolean @default(false)
  isOrganic     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELAZIONI
  cartItems      CartItem[]
  sections       SectionProduct[]
  eventInstances EventInstance[]

  @@index([active, order])
  @@index([category, order])
}

model CatalogSection {
  id             Int      @id @default(autoincrement())
  key            String   @unique // 'eventi' | 'aperitivo' | 'pranzo' | 'cena' | 'colazione'
  title          String
  description    String?
  enableDateTime Boolean  @default(false)
  active         Boolean  @default(true)
  displayOrder   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // RELAZIONI
  products SectionProduct[]
  events   SectionEventItem[]
}

model SectionProduct {
  sectionId  Int
  productId  Int
  order      Int     @default(0)
  featured   Boolean @default(false)
  showInHome Boolean @default(false)

  // RELAZIONI
  section CatalogSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])

  @@id([sectionId, productId])
  @@index([sectionId, order])
}

model EventInstance {
  id                    Int       @id @default(autoincrement())
  productId             Int
  slug                  String    @unique
  title                 String
  description           String?
  startAt               DateTime
  endAt                 DateTime?
  showOnHome            Boolean   @default(false)
  active                Boolean   @default(true)
  capacity              Int?
  allowEmailOnlyBooking Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // RELAZIONI
  product Product @relation(fields: [productId], references: [id])

  @@index([productId, startAt])
}

model EventItem {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime?
  active      Boolean   @default(true)
  showOnHome  Boolean   @default(false)
  capacity    Int?
  priceCents  Int       @default(0)
  emailOnly   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sections SectionEventItem[]
}

model SectionEvent {
  sectionId  String
  eventId    String
  order      Int     @default(0)
  featured   Boolean @default(false)
  showInHome Boolean @default(false)

  @@id([sectionId, eventId])
  @@index([eventId])
}

model SectionEventItem {
  sectionId    Int
  eventItemId  String
  displayOrder Int     @default(999)
  featured     Boolean @default(false)
  showInHome   Boolean @default(false)

  section   CatalogSection @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventItem EventItem      @relation(fields: [eventItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([sectionId, eventItemId])
  @@index([sectionId, displayOrder])
  @@map("SectionEventItem")
}

/**
 * -------------------- CARRELLO / ORDINI --------------------
 */

model Cart {
  id         String   @id @default(cuid())
  status     String   @default("open")
  totalCents Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // RELAZIONI
  items CartItem[]
  order Order?
}

model CartItem {
  id        Int    @id @default(autoincrement())
  cartId    String
  productId Int

  // snapshot per stabilit√† storica
  nameSnapshot       String
  priceCentsSnapshot Int
  qty                Int
  imageUrlSnapshot   String?
  meta               Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // RELAZIONI
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}

model Order {
  id            String   @id @default(cuid())
  cartId        String   @unique
  email         String
  name          String
  phone         String?
  status        String   @default("pending")
  totalCents    Int
  discountCents Int?
  paymentRef    String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cart     Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@index([cartId, status])
  @@index([paymentRef])
}

/**
 * -------------------- LEGACY MENU / EVENT TIERS --------------------
 */

model MenuDish {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  priceCents  Int      @default(0)
  active      Boolean  @default(true)
  category    String?
  order       Int      @default(0)
  visibleAt   String   @default("both") // lunch | dinner | both
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventTier {
  id         String  @id @default(cuid())
  type       String
  label      String
  priceCents Int
  active     Boolean @default(true)
  order      Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, active, order])
}

/**
 * -------------------- AUTH.JS --------------------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(admin)

  accounts Account[]
  sessions Session[]
}

enum UserRole {
  admin
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
